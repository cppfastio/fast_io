#include <cstddef>
#include <fast_io.h>
#include <fast_io_device.h>
#include <fast_io_dsal/vector.h>
#include <fast_io_dsal/string.h>

inline auto parse_symbols(char8_t const *path)
{
	::fast_io::vector<::fast_io::u8string> result;
	// TODO native_file_loader do not suppport ::fast_io::string_view
	::fast_io::native_file_loader symbols_loader{::fast_io::mnp::os_c_str(path)};
	auto const &&symbols_loader_size = symbols_loader.size();
	for (::std::size_t i{}; i < symbols_loader_size; ++i)
	{
		::fast_io::u8string tmp{};
		while (symbols_loader[i] != ',')
		{
			tmp.push_back(symbols_loader[i++]);
		}
		i += 2;
		tmp.push_back('@');
		while (symbols_loader[i] != '\n')
		{
			tmp.push_back(symbols_loader[i++]);
		}
		result.push_back(::std::move(tmp));
	}

	return result;
}

inline auto gen_pragmas(char8_t const *asmpath, ::fast_io::vector<::fast_io::u8string> const &win32_symbols, ::fast_io::vector<::fast_io::u8string> const &nt_symbols) noexcept
{
	::fast_io::u8string result{};
	bool is_win32_symbols{true};
	::std::size_t symbols_index{};
	auto asmfile = ::fast_io::native_file_loader{::fast_io::mnp::os_c_str(asmpath)};
	auto const &&asmfile_size = asmfile.size();
	for (::std::size_t i{}; i < asmfile_size; ++i)
	{
		if (asmfile[i] == u8'c' && asmfile[i + 1] == u8'a' && asmfile[i + 2] == u8'l' && asmfile[i + 3] == u8'l' && asmfile[i + 4] == u8'l')
		{
			i += 5;
			result.append(u8"#pragma comment(linker,\"/alternatename:");
			while (asmfile[i++] != '\"')
			{
			}
			while (asmfile[i] != '\"')
			{
				result.push_back(asmfile[i++]);
			}
			result.push_back('=');
			if (is_win32_symbols)
			{
				result.append(::fast_io::u8concat_fast_io(u8"__imp__", win32_symbols[symbols_index++]));
				result.append(u8"\")\n");
				if (symbols_index == win32_symbols.size())
				{
					is_win32_symbols = false;
					symbols_index = 0;
					result.append(u8"// NT\n");
				}
			}
			else
			{
				result.append(::fast_io::u8concat_fast_io(u8"__imp__", nt_symbols[symbols_index++]));
				result.append(u8"\")\n");
			}
		}
		continue;
	}

	return result;
}

int main()
{
	auto &&nt_symbols = parse_symbols(u8"nt_symbols.txt");
	auto &&win32_symbols = parse_symbols(u8"win32_symbols.txt");

	::fast_io::u8string x86_64_mangling{u8"#pragma once\n// This file have been generated by codegen/win32mangling, therefore, do NOT edit this file directely!\n// clang-format off\n// WIN32\n"};
	x86_64_mangling.append(gen_pragmas(u8"i686-windows-msvc.s", win32_symbols, nt_symbols));

	x86_64_mangling.append(u8R"(// msvc
#pragma comment(linker,"/alternatename:__imp_?msvc__RTtypeid@msvc@fast_io@@YAPAXPAX@Z=__imp____RTtypeid")
#pragma comment(linker,"/alternatename:?msvc__RTtypeid@msvc@fast_io@@YAPAXPAX@Z=___RTtypeid")
// clang-format on
)");

	::fast_io::native_file output{"../../../include/fast_io_hosted/platforms/win32/msvc_linker_32_i686.h", ::fast_io::open_mode::out};
	::fast_io::print(output, ::fast_io::mnp::code_cvt(x86_64_mangling));

	return 0;
}
